ch_input = ch_param.combine( CREATE.out.toList() ) // more than two compoent, start from 2 to the last is nested in the below code

ch_input = ch_param.combine( CREATE.out.toList().toList() ) // two component, second one is a list

## conditional
workflow {
  (params.flag ? bar : foo) | omega
}

## conditional 
(foo_ch, bar_ch) = params.flag
    ? [ Channel.empty(), Channel.from(1,2,3) ]
    : [ Channel.from(4,5,6), Channel.empty() ]
    
memory { reads.size() < 70.KB ? 1.GB : 5.GB }


## notice the two parameters , and the operation (-) on the two parameter
tp53 = [chromosome: "chr17",start:7661779 ,end:7687538, genome:'GRCh38', gene: "TP53"]
//perform subtraction of end and start coordinates
region_length = {start,end -> end-start }
tp53.length = region_length(tp53.start,tp53.end)



kmers = [11,21,27,31]
## this does not work
println("The first three elements in the Lists are. $kmers[0..2]")
## this works
println("The first three elements in the Lists are. ${kmers[0..2]}")

### use closures
x=[1,2,3,4,5,6]
chrx = { x -> "chr" + x}
y = x.collect(chrx)
println(y)

prefix = { "chr${it}"}
y = x.collect(prefix)
print(y)


##nextflow run wc-params.nf -params-file wc-params.json
# wc-params.json
{
  "sleep": 5,
  "input": "data/yeast/reads/etoh60_1*.fq.gz"
}


## bash variables in nextflow scripts
## There is an important difference between single-quoted and double-quoted strings: 
## Double-quoted strings support variable interpolations, while single-quoted strings do not.
process INDEX {

  script:
  """
  #set bash variable KMERSIZE
  KMERSIZE=$params.kmer
  salmon index -t $projectDir/data/yeast/transcriptome/Saccharomyces_cerevisiae.R64-1-1.cdna.all.fa.gz -i index --kmer \$KMERSIZE
  echo "kmer size is $params.kmer"
  """
}


## this works
nextflow.enable.dsl=2

params.kmer = 31

process INDEX {

  shell:
  '''
  #set bash variable KMERSIZE
  KMERSIZE=!{params.kmer}
  echo $KMERSIZE
  echo "kmer size is !{params.kmer}"
  '''
}

workflow {
  INDEX()
}



## this does not work
nextflow.enable.dsl=2

params.kmer = 31

process INDEX {

  shell:
  '''
  #set bash variable KMERSIZE
  KMERSIZE=$params.kmer
  echo \$KMERSIZE
  echo "kmer size is $params.kmer"
  '''
}

workflow {
  INDEX()
}


## this works
nextflow.enable.dsl=2

params.kmer = 31

process INDEX {

  shell:
  '''
  #set bash variable KMERSIZE
  KMERSIZE=!{params.kmer}
  echo \$KMERSIZE
  echo "kmer size is !{params.kmer}"
  '''
}

workflow {
  INDEX()
}




############# if in nextflow
nextflow.enable.dsl=2

params.aligner = 'kallisto'

process INDEX {
  script:
  if( params.aligner == 'kallisto' ) {
    """
    echo kallisto
    """
  }  
  else if( params.aligner == 'salmon' ) {
    """
    echo salmon
    """
  }  
  else {
    """
    echo Unknown aligner $params.aligner
    """
  }  
  
  
  
  
  
############## channel.of channel.value difference
##this only run once
nextflow.enable.dsl=2

process COMBINE {
  input:
  val x
  val y

  script:
  """
  echo $x and $y
  """
}
ch_num = Channel.of(1)
ch_letters = Channel.of('a', 'b', 'c')

workflow {
  COMBINE(ch_num, ch_letters)
}
  
}

workflow {
  INDEX()
}



## these run 3 times
// debug true, can be replaced by -process.echo
nextflow.enable.dsl=2

process COMBINE {
  debug true
  input:
  val x
  val y

  script:
  """
  echo $x and $y
  """
}
ch_num = Channel.value(1)
ch_letters = Channel.of('a', 'b', 'c')

workflow {
  COMBINE(ch_num, ch_letters)
}

## notice how the output folder is from the script in the out 
process FASTQC {
  input:
  path read

  output:
  path "fqc_res/*".  //fqc_res is from script

  script:
  """
  mkdir fqc_res
  fastqc $read -o fqc_res
  """
}

## capture the output folder, which is in the code of script
process INDEX {
  input:
  path transcriptome
  each kmer
 
  output:
  path "index_${kmer}" //this is in the script
 
  script:
  """
  salmon index -t $transcriptome -i index_$kmer -k $kmer
  """
}
